{"remainingRequest":"/Users/tigadmin/WEB/Webstorm-Projects/nsi-v5/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/tigadmin/WEB/Webstorm-Projects/nsi-v5/node_modules/@vue/cli-service/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/tigadmin/WEB/Webstorm-Projects/nsi-v5/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tigadmin/WEB/Webstorm-Projects/nsi-v5/src/components/HelloTop.vue?vue&type=template&id=680b045a&","dependencies":[{"path":"/Users/tigadmin/WEB/Webstorm-Projects/nsi-v5/src/components/HelloTop.vue","mtime":1656264169239},{"path":"/Users/tigadmin/WEB/Webstorm-Projects/nsi-v5/node_modules/@vue/cli-service/node_modules/cache-loader/dist/cjs.js","mtime":1638891001077},{"path":"/Users/tigadmin/WEB/Webstorm-Projects/nsi-v5/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1638891197049},{"path":"/Users/tigadmin/WEB/Webstorm-Projects/nsi-v5/node_modules/@vue/cli-service/node_modules/cache-loader/dist/cjs.js","mtime":1638891001077},{"path":"/Users/tigadmin/WEB/Webstorm-Projects/nsi-v5/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1638891197049}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}